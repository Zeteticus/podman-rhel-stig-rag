#!/usr/bin/env python3
"""
Custom parser for XCCDF-converted JSON STIG data
Handles the complex nested structure from XML conversion
"""

def parse_xccdf_json(data):
    """Parse XCCDF-converted JSON structure"""
    processed_controls = {}
    
    if isinstance(data, list):
        # Handle list of RHEL versions
        for rhel_data in data:
            if isinstance(rhel_data, dict) and 'data' in rhel_data:
                rhel_version = rhel_data.get('rhel_version', 'unknown')
                benchmark_data = rhel_data['data'].get('Benchmark', {})
                
                # Extract controls from this RHEL version
                version_controls = extract_controls_from_benchmark(benchmark_data, rhel_version)
                processed_controls.update(version_controls)
    
    elif isinstance(data, dict):
        # Handle single benchmark structure
        if 'Benchmark' in data:
            version_controls = extract_controls_from_benchmark(data['Benchmark'], 'unknown')
            processed_controls.update(version_controls)
        else:
            # Try to find benchmark data in nested structure
            for key, value in data.items():
                if isinstance(value, dict) and 'Benchmark' in value:
                    version_controls = extract_controls_from_benchmark(value['Benchmark'], key)
                    processed_controls.update(version_controls)
    
    return processed_controls

def extract_controls_from_benchmark(benchmark, rhel_version):
    """Extract STIG controls from Benchmark structure"""
    controls = {}
    
    # Look for Group elements (contain Rule elements)
    groups = []
    
    # Handle different possible structures
    if 'Group' in benchmark:
        group_data = benchmark['Group']
        if isinstance(group_data, list):
            groups = group_data
        elif isinstance(group_data, dict):
            groups = [group_data]
    
    # Also check for direct Rule elements
    rules = []
    if 'Rule' in benchmark:
        rule_data = benchmark['Rule']
        if isinstance(rule_data, list):
            rules = rule_data
        elif isinstance(rule_data, dict):
            rules = [rule_data]
    
    # Process Groups to find Rules
    for group in groups:
        if isinstance(group, dict):
            # Extract rules from group
            if 'Rule' in group:
                group_rules = group['Rule']
                if isinstance(group_rules, list):
                    rules.extend(group_rules)
                elif isinstance(group_rules, dict):
                    rules.append(group_rules)
    
    # Process each Rule to create control entries
    for rule in rules:
        if isinstance(rule, dict):
            control = extract_control_from_rule(rule, rhel_version)
            if control and 'id' in control:
                controls[control['id']] = control
    
    return controls

def extract_control_from_rule(rule, rhel_version):
    """Extract control information from a Rule element"""
    control = {}
    
    # Extract rule ID
    rule_id = rule.get('@id', '')
    if rule_id:
        control['id'] = rule_id
        control['rule_id'] = rule_id
    
    # Extract title
    title = rule.get('title', '')
    if isinstance(title, dict):
        title = title.get('#text', str(title))
    control['title'] = str(title)
    
    # Extract description
    description = rule.get('description', '')
    if isinstance(description, dict):
        description = description.get('#text', str(description))
    control['description'] = str(description)
    
    # Extract severity
    severity = rule.get('@severity', 'medium')
    control['severity'] = severity
    
    # Extract check content
    check_content = ''
    if 'check' in rule:
        check = rule['check']
        if isinstance(check, dict):
            if 'check-content' in check:
                check_content = check['check-content']
                if isinstance(check_content, dict):
                    check_content = check_content.get('#text', str(check_content))
        elif isinstance(check, list):
            for check_item in check:
                if isinstance(check_item, dict) and 'check-content' in check_item:
                    content = check_item['check-content']
                    if isinstance(content, dict):
                        content = content.get('#text', str(content))
                    check_content += str(content) + ' '
    
    control['check'] = str(check_content).strip()
    
    # Extract fix content
    fix_content = ''
    if 'fixtext' in rule:
        fixtext = rule['fixtext']
        if isinstance(fixtext, dict):
            fix_content = fixtext.get('#text', str(fixtext))
        elif isinstance(fixtext, list):
            fix_content = ' '.join([
                item.get('#text', str(item)) if isinstance(item, dict) else str(item) 
                for item in fixtext
            ])
        else:
            fix_content = str(fixtext)
    
    control['fix'] = str(fix_content).strip()
    
    # Add RHEL version
    control['rhel_version'] = rhel_version
    
    # Extract additional metadata
    if 'ident' in rule:
        ident = rule['ident']
        if isinstance(ident, list):
            for ident_item in ident:
                if isinstance(ident_item, dict):
                    system = ident_item.get('@system', '')
                    if 'CCI' in system:
                        control['cci'] = ident_item.get('#text', '')
        elif isinstance(ident, dict):
            control['cci'] = ident.get('#text', '')
    
    # Extract references
    if 'reference' in rule:
        ref = rule['reference']
        if isinstance(ref, dict):
            control['reference'] = ref.get('@href', '')
    
    return control

def safe_get_text(obj):
    """Safely extract text from XML-converted structures"""
    if isinstance(obj, dict):
        return obj.get('#text', str(obj))
    elif isinstance(obj, str):
        return obj
    else:
        return str(obj)

# Test function to analyze structure
def analyze_xccdf_structure(data, max_depth=3):
    """Analyze the structure of XCCDF JSON to help with parsing"""
    
    def analyze_recursive(obj, path="", depth=0):
        if depth > max_depth:
            return []
        
        results = []
        
        if isinstance(obj, dict):
            for key, value in obj.items():
                current_path = f"{path}.{key}" if path else key
                
                # Look for important STIG elements
                if key in ['Group', 'Rule', 'check', 'fixtext', 'title', 'description']:
                    results.append(f"Found {key} at {current_path}: {type(value)}")
                    if isinstance(value, list):
                        results.append(f"  List length: {len(value)}")
                    elif isinstance(value, dict) and '#text' in value:
                        results.append(f"  Contains text: {str(value['#text'])[:100]}...")
                
                # Look for ID patterns
                if '@id' in key or 'id' in key.lower():
                    results.append(f"ID field at {current_path}: {value}")
                
                # Recurse into nested structures
                if isinstance(value, (dict, list)) and depth < max_depth:
                    results.extend(analyze_recursive(value, current_path, depth + 1))
        
        elif isinstance(obj, list):
            results.append(f"List at {path} with {len(obj)} items")
            if len(obj) > 0:
                results.extend(analyze_recursive(obj[0], f"{path}[0]", depth + 1))
        
        return results
    
    return analyze_recursive(data)

if __name__ == "__main__":
    import json
    import sys
    
    if len(sys.argv) != 2:
        print("Usage: python3 custom_xml_parser.py your-file.json")
        sys.exit(1)
    
    # Load and analyze the JSON file
    with open(sys.argv[1], 'r') as f:
        data = json.load(f)
    
    print("üîç XCCDF Structure Analysis:")
    analysis = analyze_xccdf_structure(data)
    for line in analysis[:20]:  # Show first 20 analysis lines
        print(f"  {line}")
    
    print("\nüéØ Attempting to parse STIG controls...")
    controls = parse_xccdf_json(data)
    
    print(f"\n‚úÖ Extracted {len(controls)} STIG controls")
    
    # Show sample controls
    for i, (control_id, control_data) in enumerate(list(controls.items())[:3]):
        print(f"\nSample Control {i+1}: {control_id}")
        print(f"  Title: {control_data.get('title', 'No title')[:80]}...")
        print(f"  RHEL Version: {control_data.get('rhel_version', 'Unknown')}")
        print(f"  Severity: {control_data.get('severity', 'Unknown')}")
    
    # Save parsed controls to a new file
    output_file = sys.argv[1].replace('.json', '_parsed.json')
    with open(output_file, 'w') as f:
        json.dump(controls, f, indent=2)
    
    print(f"\nüíæ Saved parsed controls to: {output_file}")
